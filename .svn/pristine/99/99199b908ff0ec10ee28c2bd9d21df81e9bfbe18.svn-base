package com.feihua.jjcb.phone.application;

import android.app.Activity;
import android.app.Application;
import android.content.Context;
import android.graphics.Bitmap;

import com.feihua.jjcb.phone.R;
import com.feihua.jjcb.phone.utils.AreaUtil;
import com.feihua.jjcb.phone.utils.Global;
import com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
import com.nostra13.universalimageloader.core.assist.QueueProcessingType;
import com.zhy.autolayout.config.AutoLayoutConifg;
import com.zhy.http.okhttp.OkHttpUtils;

import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.TimeUnit;

/**
 * Created by wcj on 2016-03-01.
 */
public class MyApplication extends Application
{
    public static MyApplication app;
    private static DisplayImageOptions options;
    private List<Activity> activityList;

    @Override
    public void onCreate()
    {
        super.onCreate();
        app = this;
        activityList = new LinkedList<Activity>();
        Global.setApplicationContext(this);

        //碎片化管理
        AutoLayoutConifg.getInstance().useDeviceSize();
        //获取Spinner所需的数据
        AreaUtil.getInstance().getServiceData();

        //这里可以设置自签名证书
        //        OkHttpUtils.getInstance().setCertificates(new InputStream[]{
        //                new Buffer()
        //                        .writeUtf8(CER_12306)
        //                        .inputStream()});
        OkHttpUtils.getInstance().debug("OkHttpUtils").setConnectTimeout(100000, TimeUnit.MILLISECONDS);
        //使用https，但是默认信任全部证书
        OkHttpUtils.getInstance().setCertificates();


        //使用这种方式，设置多个OkHttpClient参数
        //        OkHttpUtils.getInstance(new OkHttpClient.Builder().build());

        initImageLoader(this);

    }

    public static MyApplication getInstance()
    {
        if (null == app)
        {
            app = new MyApplication();
        }
        return app;
    }

    public void addActivity(Activity activity)
    {
        activityList.add(activity);
    }

    public void exit()
    {
        for (Activity activity : activityList)
        {
            activity.finish();
        }
//        System.exit(0);
    }

    public void removeActivity(Activity activity){
        activityList.remove(activity);
    }

    public static void initImageLoader(Context context)
    {
        options = new DisplayImageOptions.Builder()
                .showImageOnLoading(R.mipmap.no_media)
                .showImageForEmptyUri(R.mipmap.no_media)
                .showImageOnFail(R.mipmap.no_media).cacheInMemory(true)
                .cacheOnDisk(true).considerExifParams(true)
                .bitmapConfig(Bitmap.Config.RGB_565).build();
        // This configuration tuning is custom. You can tune every option, you
        // may tune some of them,
        // or you can create default configuration by
        // ImageLoaderConfiguration.createDefault(this);
        // method.]
        ImageLoaderConfiguration.Builder config = new ImageLoaderConfiguration.Builder(
                context);
        config.threadPriority(Thread.NORM_PRIORITY - 2);
        config.denyCacheImageMultipleSizesInMemory();
        config.diskCacheFileNameGenerator(new Md5FileNameGenerator());
        config.diskCacheSize(50 * 1024 * 1024); // 50 MiB
        config.tasksProcessingOrder(QueueProcessingType.LIFO);
        config.writeDebugLogs(); // Remove for release app
        config.defaultDisplayImageOptions(options);

        // Initialize ImageLoader with configuration.
        ImageLoader.getInstance().init(config.build());

    }

}
